import java.util.Scanner;

public class NextFit {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Step 1: Input number of memory blocks and their sizes
        System.out.print("Enter number of blocks: ");
        int blockCount = scanner.nextInt(); // Number of memory blocks
        int[] blocks = new int[blockCount]; // Array to hold block sizes
        System.out.println("Enter block sizes:");
        for (int i = 0; i < blockCount; i++) {
            blocks[i] = scanner.nextInt(); // Populate block sizes
        }

        // Step 2: Input number of processes and their sizes
        System.out.print("Enter number of processes: ");
        int processCount = scanner.nextInt(); // Number of processes
        int[] processes = new int[processCount]; // Array to hold process sizes
        System.out.println("Enter process sizes:");
        for (int i = 0; i < processCount; i++) {
            processes[i] = scanner.nextInt(); // Populate process sizes
        }

        // Array to keep track of which block each process is allocated to
        int[] allocation = new int[processCount];
        
        // Initialize all allocations to -1, meaning no process is allocated initially
        for (int i = 0; i < processCount; i++) {
            allocation[i] = -1; // -1 indicates that the process is not allocated
        }
        
        int lastAllocatedBlock = 0; // Track the last allocated block's index

        // Step 3: Apply Next Fit for each process
        for (int i = 0; i < processCount; i++) {
            // We start looking from the last allocated block position
            boolean allocated = false; // Flag to check if process was allocated
            for (int j = 0; j < blockCount; j++) {
                int blockIndex = (lastAllocatedBlock + j) % blockCount; // Circular search
                if (blocks[blockIndex] >= processes[i]) {
                    allocation[i] = blockIndex; // Record allocation of process to block
                    blocks[blockIndex] -= processes[i]; // Reduce block size by process size
                    lastAllocatedBlock = blockIndex; // Update last allocated position
                    allocated = true; // Mark as allocated
                    break; // Move to the next process
                }
            }
            // If not allocated, allocation[i] remains -1 (indicating failure to allocate)
        }

        // Step 4: Print the results of the allocations
        System.out.println("Next Fit Allocation:");
        for (int i = 0; i < processCount; i++) {
            if (allocation[i] != -1) {
                // Process i is allocated to block at allocation[i]
                System.out.println("Process " + i + " allocated to Block " + allocation[i]);
            } else {
                // Process i could not be allocated
                System.out.println("Process " + i + " not allocated");
            }
        }
        
        scanner.close(); // Close the scanner object
    }
}


Enter number of blocks: 5
Enter block sizes:
100 500 200 300 600
Enter number of processes: 4
Enter process sizes:
212 417 112 426


